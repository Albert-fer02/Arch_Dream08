# =====================================================
# 🚀 BASH Configuration - Arch Linux Optimized
# =====================================================
# Optimized for performance and productivity
# =====================================================

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# =====================================================
# ⚡ PERFORMANCE OPTIMIZATIONS
# =====================================================

# Disable flow control commands (keeps C-s from freezing everything)
stty -ixon

# Enable incremental history search
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# =====================================================
# ⚙️ ENVIRONMENT & PATH
# =====================================================

# Editor Configuration
export EDITOR='nvim' VISUAL='nvim' BROWSER='firefox' TERMINAL='kitty'

# Locale Configuration (Peru)
export LANG=es_PE.UTF-8 LC_ALL=es_PE.UTF-8 LC_COLLATE=C

# PATH Configuration - Optimized order
export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$HOME/.bun/bin:$HOME/.npm-global/bin:/usr/local/bin:$PATH"

# XDG Base Directory Specification
export XDG_CONFIG_HOME="$HOME/.config" 
export XDG_DATA_HOME="$HOME/.local/share" 
export XDG_CACHE_HOME="$HOME/.cache" 
export XDG_STATE_HOME="$HOME/.local/state"

# Development environment
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"
export NODE_ENV=development

# =====================================================
# 🎨 COLORS & PROMPT
# =====================================================

# Colors with better contrast
export CLICOLOR=1
export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd

# Enhanced prompt with git status
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# Color prompt with git integration
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[33m\]$(parse_git_branch)\[\033[00m\]\$ '

# =====================================================
# 🛠️ ENHANCED ALIASES
# =====================================================

# File Operations with modern tools
if command -v eza &> /dev/null; then
    alias ls='eza --icons --group-directories-first --git'
    alias ll='eza -l --icons --group-directories-first --git --time-style=long-iso'
    alias la='eza -la --icons --group-directories-first --git'
    alias tree='eza --tree --level=3 --icons --git-ignore'
    alias ltree='eza --tree --level=4 --icons --long --git-ignore'
else
    alias ls='ls --color=auto --group-directories-first'
    alias ll='ls -alF --color=auto --group-directories-first'
    alias la='ls -A --color=auto --group-directories-first'
    alias l='ls -CF --color=auto'
fi

# Modern replacements
if command -v bat &> /dev/null; then
    alias cat='bat --style=plain --paging=never'
    alias ccat='bat --style=full'
    export BAT_THEME="Catppuccin Frappe"
fi

if command -v rg &> /dev/null; then
    alias grep='rg --smart-case --hidden --glob "!**/.git/*" --glob "!**/node_modules/*"'
    alias rga='rg --no-ignore --hidden'
    alias rgi='rg --case-insensitive'
fi

if command -v fd &> /dev/null; then
    alias find='fd'
    alias fda='fd --no-ignore --hidden'
    alias fdi='fd --case-insensitive'
fi

# Navigation shortcuts
alias ..='cd ..' ...='cd ../..' ....='cd ../../..' ~='cd ~' -- -='cd -'

# Directory shortcuts
alias dl='cd ~/Downloads' dt='cd ~/Desktop' dc='cd ~/Documents' 
alias dev='cd ~/Development' proj='cd ~/Projects' tmp='cd /tmp'

# Git aliases - Enhanced
alias g='git' gs='git status --short --branch' ga='git add' gaa='git add --all'
alias gc='git commit --verbose' gcm='git commit -m' gca='git commit -am'
alias gp='git push' gpl='git pull' gl='git log --oneline --graph --decorate --all -10'
alias gd='git diff' gdc='git diff --cached' gco='git checkout' gb='git branch'
alias gba='git branch -a' gbd='git branch -d' gm='git merge' gr='git rebase'
alias gst='git stash' gstp='git stash pop' gf='git fetch' gcl='git clone'

# Arch Linux specific aliases
alias pac='sudo pacman' pacr='sudo pacman -R' pacu='sudo pacman -Syu'
alias pacq='pacman -Q' pacqi='pacman -Qi' pacql='pacman -Ql'
alias pacqo='pacman -Qo' pacc='sudo pacman -Sc' paccc='sudo pacman -Scc'

# AUR helper detection
if command -v yay &> /dev/null; then
    alias aur='yay' aurs='yay -Ss' auri='yay -S' auru='yay -Syu'
elif command -v paru &> /dev/null; then
    alias aur='paru' aurs='paru -Ss' auri='paru -S' auru='paru -Syu'
fi

# System monitoring
if command -v btop &> /dev/null; then
    alias top='btop'
elif command -v htop &> /dev/null; then
    alias top='htop'
fi

if command -v duf &> /dev/null; then
    alias df='duf'
fi

if command -v dust &> /dev/null; then
    alias du='dust'
fi

# Safety aliases
alias rm='rm -i' cp='cp -i' mv='mv -i' mkdir='mkdir -p'

# Network aliases
alias myip='curl -s ifconfig.me && echo'
alias localip="ip route get 8.8.8.8 | awk '{print \$7}'"
alias ports='sudo lsof -i -P -n | grep LISTEN'
alias ping='ping -c 5'

# Development aliases
alias py='python' py3='python3' pip='pip3' venv='python -m venv'
alias n='npm' ni='npm install' nid='npm install --save-dev'
alias nrb='npm run build' nrd='npm run dev'

# =====================================================
# 🚀 ADVANCED FUNCTIONS
# =====================================================

# Extract function - Enhanced
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2) tar xjf "$1" ;;
            *.tar.gz)  tar xzf "$1" ;;
            *.bz2)     bunzip2 "$1" ;;
            *.rar)     unrar x "$1" ;;
            *.gz)      gunzip "$1"  ;;
            *.tar)     tar xf "$1"  ;;
            *.tbz2)    tar xjf "$1" ;;
            *.tgz)     tar xzf "$1" ;;
            *.zip)     unzip "$1"   ;;
            *.Z)       uncompress "$1" ;;
            *.7z)      7z x "$1"    ;;
            *.xz)      unxz "$1"    ;;
            *.exe)     cabextract "$1" ;;
            *.deb)     ar x "$1" && tar xf data.tar.* ;;
            *.rpm)     rpm2cpio "$1" | cpio -idmv ;;
            *)         echo "'$1': unrecognized file compression" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Quick backup with timestamp
backup() {
    cp "$1" "$1.backup.$(date +%Y%m%d_%H%M%S)"
}

# Enhanced system information
sysinfo() {
    echo "=== System Information ==="
    echo "Hostname: $(hostname)"
    echo "Kernel: $(uname -r)"
    echo "Uptime: $(uptime -p)"
    echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
    echo "Memory Usage: $(free -h | awk '/^Mem:/ {printf "%s/%s (%.1f%%)", $3, $2, $3/$2*100}')"
    echo "Disk Usage: $(df -h / | awk 'NR==2 {printf "%s/%s (%s)", $3, $2, $5}')"
    echo "CPU Temperature: $(sensors 2>/dev/null | grep 'Core 0' | awk '{print $3}' || echo 'N/A')"
}

# Quick directory size
dirsize() {
    du -sh "$1" 2>/dev/null || echo "Directory not found"
}

# Find files by extension
findext() {
    find . -name "*.$1" -type f
}

# Count files by extension
countext() {
    find . -name "*.$1" -type f | wc -l
}

# Quick search in files
search() {
    grep -r "$1" . --exclude-dir={.git,node_modules,.cache}
}

# Create a new project directory
newproj() {
    if [ $# -eq 1 ]; then
        mkcd "$1" && echo "Project '$1' created and entered"
    else
        echo "Usage: newproj <project_name>"
    fi
}

# Quick note taking
note() {
    local note_file="$HOME/notes/$(date +%Y%m%d).md"
    mkdir -p "$(dirname "$note_file")"
    if [ $# -eq 0 ]; then
        $EDITOR "$note_file"
    else
        echo "$(date '+%H:%M'): $*" >> "$note_file"
        echo "Note added: $*"
    fi
}

# Quick todo
todo() {
    local todo_file="$HOME/todo.md"
    if [ $# -eq 0 ]; then
        $EDITOR "$todo_file"
    else
        echo "- [ ] $*" >> "$todo_file"
        echo "Todo added: $*"
    fi
}

# Quick calculator
calc() {
    echo "$*" | bc -l
}

# Quick URL shortener
shorten() {
    curl -s "http://tinyurl.com/api-create.php?url=$1"
}

# Quick QR code generator
qr() {
    echo "$1" | curl -F-=\<- qrenco.de
}

# Quick password generator
passgen() {
    openssl rand -base64 "${1:-12}" | tr -d "=+/" | cut -c1-${1:-12}
}

# System update function
sysupdate() {
    echo "🔄 Updating system..."
    sudo pacman -Syu
    if command -v yay &> /dev/null; then
        echo "🔄 Updating AUR packages..."
        yay -Sua
    elif command -v paru &> /dev/null; then
        echo "🔄 Updating AUR packages..."
        paru -Sua
    fi
    echo "✅ System updated!"
}

# System maintenance
sysmaintenance() {
    echo "🔧 Running system maintenance..."
    sudo pacman -Sc --noconfirm
    sudo journalctl --vacuum-time=7d
    sudo pacman -Rns $(pacman -Qtdq) 2>/dev/null || true
    echo "✅ System maintenance completed!"
}

# Git functions
gac() {
    git add --all && git commit -m "$1"
}

gacp() {
    git add --all && git commit -m "$1" && git push
}

gundo() {
    git reset --soft HEAD~1
}

gamend() {
    git commit --amend --no-edit
}

# =====================================================
# 🔧 COMPLETION
# =====================================================

# Enable programmable completion features
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# =====================================================
# 📋 HISTORY
# =====================================================

# History configuration - Optimized
HISTCONTROL=ignoreboth:erasedups
HISTSIZE=5000
HISTFILESIZE=10000
HISTTIMEFORMAT="%Y-%m-%d %T "
HISTIGNORE="ls:ll:la:cd:pwd:clear:history:exit"

# Append to the history file, don't overwrite it
shopt -s histappend

# =====================================================
# 🎯 PRODUCTIVITY
# =====================================================

# Check the window size after each command
shopt -s checkwinsize

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# =====================================================
# 🏁 INITIALIZATION
# =====================================================

# Load Node Version Manager (if exists)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Rust environment
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# Load any additional custom configurations
[ -f ~/.bashrc.local ] && source ~/.bashrc.local

# Welcome message - Only show once per session
if [ -z "$BASH_WELCOME_SHOWN" ]; then
    echo "🐚 Enhanced Bash loaded with productivity features"
    echo "💡 Run: sysinfo, sysupdate, sysmaintenance for system management"
    export BASH_WELCOME_SHOWN=1
fi
alias vim="nvim"

# Fastfetch aliases
alias ff="fastfetch-random"
alias ff-dream="fastfetch-random --config ~/.config/fastfetch/themes/dreamcoder.jsonc"
alias ff-custom="fastfetch-random --config ~/.config/fastfetch/config.local.jsonc"

# Nano aliases
alias nano="nano --rcfile ~/.config/nano/nanorc"
alias nano-code="nano --rcfile ~/.config/nano/code.nanorc"
alias nano-config="nano --rcfile ~/.config/nano/config.nanorc"
alias nano-log="nano --rcfile ~/.config/nano/log.nanorc"
alias nano-edit="nano --rcfile ~/.config/nano/nanorc.local"

# =====================================================
# üß© CONFIGURACI√ìN LOCAL DE ZSH - RED TEAM
# =====================================================
# Personalizaciones espec√≠ficas del usuario
# Este archivo NO se sobrescribe con actualizaciones
# =====================================================

# =====================================================
# üåç VARIABLES DE ENTORNO PERSONALIZADAS
# =====================================================

# Configuraci√≥n de pentesting
# export TARGET=""
# export PROXY=""
# export VPN_STATUS=""
# export CURRENT_TOOL=""

# Configuraci√≥n de desarrollo
export NODE_ENV="development"
export PYTHONPATH="${PYTHONPATH}:${HOME}/.local/lib/python3.11/site-packages"
export GOPATH="${HOME}/go"
export PATH="${PATH}:${GOPATH}/bin"

# Configuraci√≥n de herramientas
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

# =====================================================
# üé® STARSHIP PROMPT - CONFIGURACI√ìN LOCAL
# =====================================================

# Starship ahora se inicializa en `~/.zshrc` del m√≥dulo.
# Puedes sobreescribir la ruta del config si quieres un tema distinto:
# export STARSHIP_CONFIG="$HOME/.config/starship-catppuccin-mocha.toml"

# Configuraci√≥n personalizada de Starship
export STARSHIP_CONFIG="${STARSHIP_CONFIG:-$HOME/.config/starship.toml}"

# =====================================================
# üîß ALIASES PERSONALIZADOS
# =====================================================

# Aliases de desarrollo
alias dev="cd ~/Developer"
alias proj="cd ~/Projects"
alias docs="cd ~/Documents"
alias dl="cd ~/Downloads"

# Aliases de herramientas
alias vim="nvim"
alias vi="nvim"
alias edit="nvim"
alias code="nvim"

# Aliases de sistema
alias update="sudo pacman -Syu"
alias install="sudo pacman -S"
alias remove="sudo pacman -Rs"
alias search="pacman -Ss"
alias aur="yay -S"

# Aliases de red
alias myip="curl -s ipinfo.io/ip"
alias localip="ip route get 1.1.1.1 | awk '{print \$7}'"
alias ports="ss -tulanp"

# =====================================================
# üöÄ FUNCIONES PERSONALIZADAS
# =====================================================

# Funci√≥n para crear proyecto r√°pido
create-project() {
    local project_name="$1"
    local project_type="${2:-basic}"
    
    if [[ -z "$project_name" ]]; then
        echo "Uso: create-project <nombre> [tipo]"
        echo "Tipos disponibles: basic, python, node, rust, go"
        return 1
    fi
    
    mkdir -p "$project_name"
    cd "$project_name"
    
    case "$project_type" in
        "python")
            echo "üêç Creando proyecto Python..."
            python3 -m venv venv
            echo "venv/" > .gitignore
            echo "*.pyc" >> .gitignore
            echo "__pycache__/" >> .gitignore
            echo "requirements.txt" >> .gitignore
            touch requirements.txt README.md main.py
            ;;
        "node")
            echo "üü¢ Creando proyecto Node.js..."
            npm init -y
            echo "node_modules/" > .gitignore
            echo "*.log" >> .gitignore
            echo "dist/" >> .gitignore
            touch README.md index.js
            ;;
        "rust")
            echo "ü¶Ä Creando proyecto Rust..."
            cargo init --name "$project_name"
            ;;
        "go")
            echo "üîµ Creando proyecto Go..."
            go mod init "$project_name"
            touch README.md main.go
            ;;
        *)
            echo "üìÅ Creando proyecto b√°sico..."
            touch README.md
            ;;
    esac
    
    echo "‚úÖ Proyecto '$project_name' creado exitosamente!"
    echo "üìÅ Ubicaci√≥n: $(pwd)"
}

# Funci√≥n para backup r√°pido
quick-backup() {
    local source="$1"
    local backup_dir="${2:-~/backups}"
    
    if [[ -z "$source" ]]; then
        echo "Uso: quick-backup <archivo/directorio> [directorio_destino]"
        return 1
    fi
    
    [[ ! -d "$backup_dir" ]] && mkdir -p "$backup_dir"
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_name="$(basename "$source")_backup_$timestamp"
    
    if [[ -d "$source" ]]; then
        tar -czf "$backup_dir/$backup_name.tar.gz" -C "$(dirname "$source")" "$(basename "$source")"
    else
        cp "$source" "$backup_dir/$backup_name"
    fi
    
    echo "‚úÖ Backup creado: $backup_dir/$backup_name"
}

# Funci√≥n para buscar en archivos
search-files() {
    local pattern="$1"
    local directory="${2:-.}"
    
    if [[ -z "$pattern" ]]; then
        echo "Uso: search-files <patr√≥n> [directorio]"
        return 1
    fi
    
    if command -v rg &>/dev/null; then
        rg -i "$pattern" "$directory"
    elif command -v grep &>/dev/null; then
        grep -r -i "$pattern" "$directory" 2>/dev/null
    else
        echo "‚ùå No se encontr√≥ rg o grep"
        return 1
    fi
}

# Funci√≥n para mostrar informaci√≥n de red
network-info() {
    echo "üåê Informaci√≥n de Red:"
    echo "  IP Local: $(ip route get 1.1.1.1 2>/dev/null | awk '{print $7}' || echo 'N/A')"
    echo "  IP P√∫blica: $(curl -s ipinfo.io/ip 2>/dev/null || echo 'N/A')"
    echo "  Gateway: $(ip route | grep default | awk '{print $3}' || echo 'N/A')"
    echo "  DNS: $(cat /etc/resolv.conf | grep nameserver | awk '{print $2}' | tr '\n' ' ' || echo 'N/A')"
}

# =====================================================
# üéØ CONFIGURACIONES ESPEC√çFICAS DE HERRAMIENTAS
# =====================================================

# Configuraci√≥n de Python
if command -v python3 &>/dev/null; then
    alias py="python3"
    alias pip="pip3"
    
    # Activar entorno virtual si existe
    if [[ -d "venv" ]]; then
        source venv/bin/activate
    fi
fi

# Configuraci√≥n de Node.js
if command -v node &>/dev/null; then
    alias npm="npm"
    alias npx="npx"
    
    # NVM lazy loading mejorado
    if [[ -d "$HOME/.nvm" ]]; then
        export NVM_DIR="$HOME/.nvm"
        nvm() {
            unset -f nvm
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm "$@"
        }
        node() {
            unset -f node
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            node "$@"
        }
        npm() {
            unset -f npm
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm "$@"
        }
    fi
fi

# Configuraci√≥n de Rust
if command -v cargo &>/dev/null; then
    alias cr="cargo run"
    alias cb="cargo build"
    alias ct="cargo test"
    alias cc="cargo check"
fi

# Configuraci√≥n de Go
if command -v go &>/dev/null; then
    alias gr="go run"
    alias gb="go build"
    alias gt="go test"
    alias gf="go fmt"
fi

# =====================================================
# üîê CONFIGURACIONES DE SEGURIDAD
# =====================================================

# Variables de entorno sensibles (no se guardan en historial)
# export API_KEY=""
# export SECRET_TOKEN=""
# export DATABASE_URL=""
# export AWS_ACCESS_KEY_ID=""
# export AWS_SECRET_ACCESS_KEY=""

# Funci√≥n para limpiar variables sensibles
clear-sensitive-vars() {
    unset API_KEY SECRET_TOKEN DATABASE_URL AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    echo "üîí Variables sensibles limpiadas"
}

# =====================================================
# üìä MONITOREO Y DIAGN√ìSTICO
# =====================================================

# Funci√≥n para diagn√≥stico del sistema
system-diagnostic() {
    echo "üîç Diagn√≥stico del Sistema:"
    echo "  OS: $(uname -sr)"
    echo "  Kernel: $(uname -r)"
    echo "  Arquitectura: $(uname -m)"
    echo "  Uptime: $(uptime -p 2>/dev/null || uptime)"
    echo "  Shell: $SHELL"
    echo "  Usuario: $(whoami)"
    echo "  Home: $HOME"
    echo "  PATH: $PATH"
}

# Funci√≥n para verificar herramientas instaladas
check-tools() {
    local tools=("git" "nvim" "python3" "node" "cargo" "go" "docker" "kubectl")
    echo "üîß Herramientas instaladas:"
    
    for tool in "${tools[@]}"; do
        if command -v "$tool" &>/dev/null; then
            local version=$("$tool" --version 2>/dev/null | head -n1 || echo "Disponible")
            echo "  ‚úÖ $tool: $version"
        else
            echo "  ‚ùå $tool: No instalado"
        fi
    done
}

# =====================================================
# üé® PERSONALIZACIONES VISUALES
# =====================================================

# Colores personalizados para ls
if command -v dircolors &>/dev/null; then
    [[ -f ~/.dircolors ]] && eval "$(dircolors -b ~/.dircolors)"
fi

# Configuraci√≥n de less
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
export LESS_TERMCAP_me=$'\E[0m'        # end mode
export LESS_TERMCAP_se=$'\E[0m'        # end stand-out
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin stand-out - info box
export LESS_TERMCAP_ue=$'\E[0m'        # end underline
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline

# =====================================================
# üöÄ INICIALIZACI√ìN FINAL
# =====================================================

# Mostrar mensaje de bienvenida personalizado
if [[ -z "$WELCOME_SHOWN" ]]; then
    echo "üéâ Configuraci√≥n local de ZSH cargada exitosamente!"
    echo "üí° Comandos √∫tiles: create-project, quick-backup, search-files, network-info"
    echo "üîß Diagn√≥sticos: system-diagnostic, check-tools, status"
    echo "üéØ Red Team: pentest-context, clear-context, context"
    export WELCOME_SHOWN=1
fi

# Recargar completiones
autoload -Uz compinit
compinit -d ~/.zsh/cache/.zcompdump

echo "‚úÖ Configuraci√≥n local de ZSH completada"

#!/bin/zsh
# =====================================================
# 🚀 ZSH Configuration - Arch Dream Unified
# =====================================================
# Configuración ultra-optimizada usando arquitectura unificada
# Features: Shared base, Starship prompt, Zinit plugins
# =====================================================

# =====================================================
# ⚡ CORE INITIALIZATION
# =====================================================

# Load unified shell base configuration
SHELL_BASE_FILE="${${(%):-%x}:h}/../../../lib/shell-base.sh"
if [[ -f "$SHELL_BASE_FILE" ]]; then
    source "$SHELL_BASE_FILE"
    init_shell_base
else
    echo "⚠️  Warning: Unified shell base not found, using fallback configuration"
    # Fallback basic configuration
    export EDITOR='nvim' VISUAL='nvim' BROWSER='firefox' TERMINAL='kitty'
    export LANG="${ARCH_DREAM_LOCALE:-en_US.UTF-8}"
    export LC_ALL="$LANG"
fi

# =====================================================
# 🎯 ZSH-SPECIFIC OPTIMIZATIONS
# =====================================================

# Disable global RCS files for better security
unsetopt GLOBAL_RCS

# Enable completion caching with optimized settings
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Optimize history for performance and security
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_ALL_DUPS HIST_IGNORE_SPACE 
setopt HIST_FIND_NO_DUPS HIST_SAVE_NO_DUPS INC_APPEND_HISTORY 
setopt SHARE_HISTORY HIST_VERIFY HIST_REDUCE_BLANKS HIST_FCNTL_LOCK
setopt BANG_HIST EXTENDED_HISTORY

# Shell Options - Optimized for productivity
setopt CORRECT CORRECT_ALL NOCLOBBER AUTO_CD AUTO_PUSHD 
setopt PUSHD_IGNORE_DUPS PUSHD_SILENT GLOB_DOTS EXTENDED_GLOB 
setopt NUMERIC_GLOB_SORT NULL_GLOB AUTO_MENU AUTO_PARAM_SLASH
setopt COMPLETE_IN_WORD ALWAYS_TO_END MENU_COMPLETE AUTO_LIST
setopt LIST_PACKED LIST_TYPES COMPLETE_ALIASES NO_BEEP
setopt INTERACTIVE_COMMENTS HASH_LIST_ALL PRINT_EXIT_VALUE

# =====================================================
# 🔧 ZINIT PLUGIN MANAGER SETUP
# =====================================================

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# =====================================================
# 🔌 ZINIT PLUGINS - Productivity Suite
# =====================================================

# Essential zsh plugins
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting

# Navigation and productivity plugins
zinit light rupa/z
zinit light zdharma-continuum/history-search-multi-word
zinit light agkozak/zsh-z
zinit light MichaelAquilina/zsh-you-should-use
zinit light wfxr/forgit
zinit light changyuheng/zsh-interactive-cd

# Additional productivity plugins
zinit light zsh-users/zsh-history-substring-search
zinit ice wait lucid; zinit light marlonrichert/zsh-autocomplete

# =====================================================
# 🎨 FZF CONFIGURATION
# =====================================================

# Enhanced FZF configuration with better keybindings and preview
export FZF_DEFAULT_OPTS="
--color=bg+:#363a4f,bg:#24273a,spinner:#f4dbd6,hl:#ed8796
--color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6
--color=marker:#f4dbd6,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796
--height=60% --layout=reverse --border --margin=1 --padding=1
--preview-window=right:60%:wrap --info=inline
--bind='ctrl-u:preview-page-up,ctrl-d:preview-page-down'
--bind='ctrl-/:toggle-preview,alt-/:change-preview-window(down|hidden|)'
--bind='ctrl-y:execute-silent(echo {} | xclip -selection clipboard)'
--bind='ctrl-r:reload,alt-enter:execute(echo {} > /tmp/fzf-selected)'
--bind='ctrl-alt-j:preview-down,ctrl-alt-k:preview-up'
--bind='alt-a:select-all,alt-d:deselect-all,alt-t:toggle-all'
--multi --cycle
"

# Optimized search commands with better exclusions
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --exclude node_modules --exclude .cache --exclude .npm --exclude .yarn'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git --exclude node_modules --exclude .cache'

# FZF completion trigger for faster access
export FZF_COMPLETION_TRIGGER='**'
export FZF_COMPLETION_OPTS='--border --info=inline'

# =====================================================
# 🎨 COMPLETION ENHANCEMENTS
# =====================================================

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Better completion for kill command
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# SSH completion
zstyle ':completion:*:ssh:*' hosts off
zstyle ':completion:*:scp:*' hosts off

# =====================================================
# 🔌 PLUGIN CONFIGURATIONS
# =====================================================

# Autosuggestions - Enhanced configuration
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666,bold"
ZSH_AUTOSUGGEST_STRATEGY=(history completion match_prev_cmd)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_USE_ASYNC=true
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(end-of-line vi-end-of-line vi-add-eol)
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(forward-char forward-word)

# Syntax highlighting
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_STYLES[command]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[alias]='fg=cyan,bold'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=yellow,bold'
ZSH_HIGHLIGHT_STYLES[function]='fg=blue,bold'

# =====================================================
# 🏁 INITIALIZATION
# =====================================================

# =====================================================
# ⚡ PERFORMANCE OPTIMIZATIONS
# =====================================================

# Load completions with advanced cache optimization
autoload -Uz compinit
ZSH_CACHE_DIR="$HOME/.zsh"
mkdir -p "$ZSH_CACHE_DIR"

# Only rebuild completions if they're older than 24 hours
if [[ -n $ZSH_CACHE_DIR/compdump(#qN.mh+24) ]]; then
    compinit -d "$ZSH_CACHE_DIR/compdump"
else
    compinit -C -d "$ZSH_CACHE_DIR/compdump"
fi

# Compile zsh files for faster loading
{
    local zcompare zcompare_file
    setopt extendedglob local_options
    
    if [[ -s ~/.zshrc && (! -s ~/.zshrc.zwc || ~/.zshrc -nt ~/.zshrc.zwc) ]]; then
        zcompile ~/.zshrc
    fi
    
    for zcompare_file in ~/.zshrc.local ${ZDOTDIR:-$HOME}/.z*(N); do
        if [[ -s $zcompare_file && (! -s ${zcompare_file}.zwc || $zcompare_file -nt ${zcompare_file}.zwc) ]]; then
            zcompile $zcompare_file
        fi
    done
} &!

# Lazy loading for commands to improve startup time
lazy_load() {
    local command="$1"
    shift
    local load_command="$*"
    
    eval "$command() {
        unfunction $command
        $load_command
        $command \"\$@\"
    }"
}

# Optimize module loading order
zmodload zsh/complist
zmodload -i zsh/parameter"

# Bun completions
[[ -s "$HOME/.bun/_bun" ]] && source "$HOME/.bun/_bun"

# FZF key bindings - Use system package first, then fallback
if [[ -f /usr/share/fzf/key-bindings.zsh ]] && [[ -f /usr/share/fzf/completion.zsh ]]; then
    source /usr/share/fzf/key-bindings.zsh
    source /usr/share/fzf/completion.zsh
elif command -v fzf &>/dev/null; then
    export FZF_COMPLETION_TRIGGER='**'
fi

# Enhanced terminal initialization
if [[ $- == *i* ]]; then
  if [[ -z "$FASTFETCH_SHOWN" && -z "${ZELLIJ:-}${TMUX:-}" && -z "${VSCODE_INJECTION:-}${TERM_PROGRAM:-}" ]]; then
    if command -v fastfetch &> /dev/null; then
      fastfetch
    elif command -v neofetch &> /dev/null; then
      neofetch
    fi
    export FASTFETCH_SHOWN=1
  fi
fi

# Key bindings for enhanced navigation
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word
bindkey '^H' backward-kill-word
bindkey '^[[3;5~' kill-word

# History search bindings
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward

# =====================================================
# 🚀 PRODUCTIVITY ENHANCEMENTS
# =====================================================

# Smart aliases for enhanced productivity
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias -- -='cd -'

# Enhanced file operations
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -I'
alias mkdir='mkdir -pv'
alias ls='eza --icons --group-directories-first'
alias ll='eza -l --icons --group-directories-first'
alias la='eza -la --icons --group-directories-first'
alias tree='eza --tree --icons'

# System monitoring aliases
alias htop='btop'
alias top='btop'
alias ps='procs'
alias du='dust'
alias df='duf'
alias grep='rg'
alias find='fd'
alias cat='bat'
alias diff='delta'

# Git productivity aliases
alias g='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gco='git checkout'
alias gb='git branch'
alias glog='git log --oneline --graph --decorate'

# Network utilities
alias myip='curl -s ipinfo.io/ip'
alias localip="ip route get 1.1.1.1 | awk '{print \$7}'"
alias ports='netstat -tulanp'
alias ping='ping -c 5'

# Quick navigation functions
mkcd() { mkdir -p "$1" && cd "$1" }
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"   ;;
            *.tar.gz)    tar xzf "$1"   ;;
            *.bz2)       bunzip2 "$1"  ;;
            *.rar)       unrar x "$1"  ;;
            *.gz)        gunzip "$1"   ;;
            *.tar)       tar xf "$1"   ;;
            *.tbz2)      tar xjf "$1"  ;;
            *.tgz)       tar xzf "$1"  ;;
            *.zip)       unzip "$1"    ;;
            *.Z)         uncompress "$1" ;;
            *.7z)        7z x "$1"     ;;
            *)           echo "'$1' cannot be extracted" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Quick system info function
sysinfo() {
    echo "📊 System Information:"
    echo "  OS: $(lsb_release -d | cut -f2)"
    echo "  Kernel: $(uname -r)"
    echo "  Uptime: $(uptime -p)"
    echo "  CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
    echo "  Memory: $(free -h | awk 'NR==2{printf "%.1fG/%.1fG (%.0f%%)", $3/1024, $2/1024, $3*100/$2}')"
    echo "  Disk: $(df -h / | awk 'NR==2{printf "%s/%s (%s)", $3, $2, $5}')"
}

# Quick edit function for dotfiles
dotfile() {
    case "$1" in
        zsh|zshrc)      $EDITOR ~/.zshrc ;;
        zshlocal)       $EDITOR ~/.zshrc.local ;;
        nvim|neovim)    $EDITOR ~/.config/nvim/init.lua ;;
        starship)       $EDITOR ~/.config/starship.toml ;;
        kitty)          $EDITOR ~/.config/kitty/kitty.conf ;;
        *)              echo "Available: zsh, zshlocal, nvim, starship, kitty" ;;
    esac
}

# Enhanced directory jumping with fzf
fcd() {
    local dir
    dir=$(fd --type d --hidden --follow --exclude .git . ${1:-.} | fzf --preview 'eza --tree --level=2 {}') && cd "$dir"
}

# Enhanced file finding with fzf
fff() {
    local file
    file=$(fd --type f --hidden --follow --exclude .git . ${1:-.} | fzf --preview 'bat --color=always --style=header,grid --line-range :300 {}') && $EDITOR "$file"
}

# Quick process killer with fzf
fkill() {
    local pid
    pid=$(ps -ef | sed 1d | fzf -m --header="[KILL PROCESS]" | awk '{print $2}')
    
    if [ -n "$pid" ]; then
        echo "$pid" | xargs kill -${1:-9}
    fi
}

# Enhanced git log with fzf
fglog() {
    git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
        --bind "ctrl-m:execute:
            (grep -o '[a-f0-9]\{7\}' | head -1 |
            xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
            {}
FZF-EOF"
}

# Load any additional custom configurations
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# Create local config if not exists
if [[ ! -f "$HOME/.zshrc.local" ]]; then
    cat > "$HOME/.zshrc.local" << 'EOF'
# =====================================================
# 🧩 CONFIGURACIÓN LOCAL DE ZSH - ARCH DREAM
# =====================================================
# Personalizaciones específicas del usuario
# Este archivo NO se sobrescribe con actualizaciones
# =====================================================

# Variables de entorno personalizadas
# export TARGET=""
# export PROXY=""

# Aliases personalizados
# alias custom="comando personalizado"

# Funciones personalizadas
# custom_function() {
#     echo "Mi función personalizada"
# }

EOF
fi

# =====================================================
# 🚀 ADVANCED ZSH FEATURES
# =====================================================

# Smart word selection with Alt+f/b
select-word-style bash

# Advanced directory stack management
setopt AUTO_PUSHD PUSHD_MINUS PUSHD_TO_HOME

# Smart URL handling
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# Advanced completion system
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' menu select=2
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'

# Advanced file completion
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command 'ps -u $USER -o pid,user,comm -w -w'

# Tmux/Screen completion enhancement
zstyle ':completion:*:*:tmux:*' menu yes select
zstyle ':completion:*:*:screen:*' menu yes select

# Smart correction system
zstyle ':completion:*' matcher-list '' 'm:{a-z\\-}={A-Z\_}' 'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\\-}={A-Z\_}' 'r:|?=** m:{a-z\\-}={A-Z\_}'

# Custom widgets for enhanced editing
smart-backspace() {
    if [[ $LBUFFER =~ '\\s+$' ]]; then
        zle backward-delete-char
    else
        zle backward-delete-word
    fi
}
zle -N smart-backspace
bindkey '^?' smart-backspace

# Enhanced word movement
backward-word-match() {
    zle backward-word
    while [[ $LBUFFER[-1] == ' ' ]]; do
        zle backward-char
    done
}
zle -N backward-word-match
bindkey '^[b' backward-word-match

# Quick command substitution
command-line-substitute() {
    LBUFFER=${LBUFFER//$'\\n'/ && }
    zle accept-line
}
zle -N command-line-substitute
bindkey '^X^X' command-line-substitute

# Enhanced cd functionality with automatic ls
cd() {
    builtin cd "$@" && eza --icons --group-directories-first
}

# Smart sudo insertion
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == sudo\\ * ]]; then
        LBUFFER="${LBUFFER#sudo }"
    else
        LBUFFER="sudo $LBUFFER"
    fi
}
zle -N sudo-command-line
bindkey '^[^[' sudo-command-line

# =====================================================
# 🔧 PERFORMANCE OPTIMIZATIONS
# =====================================================

# Disable gitstatus messages for cleaner output
export GITSTATUS_DAEMON_LOG_LEVEL=ERROR
export GITSTATUS_DAEMON_LOG_LEVEL_STDERR=ERROR

# Mark shell as loaded
export ZSH_CONFIG_LOADED=true
[[ -n "${ARCH_DREAM_DEBUG:-}" ]] && echo "✅ Zsh configuration loaded successfully"
#!/bin/zsh
# =====================================================
# üöÄ ZSH Configuration - Arch Dream v4.2 CLEAN
# =====================================================
# Focused and essential Zsh configuration
# =====================================================

# =====================================================
# üìö HISTORIAL OPTIMIZADO
# =====================================================

HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000

# Opciones de historial esenciales
setopt HIST_IGNORE_DUPS          # No duplicar comandos consecutivos
setopt HIST_IGNORE_ALL_DUPS      # Eliminar duplicados en todo el historial
setopt HIST_SAVE_NO_DUPS         # No guardar duplicados
setopt HIST_FIND_NO_DUPS         # No mostrar duplicados en b√∫squeda
setopt HIST_IGNORE_SPACE         # Ignorar comandos que empiecen con espacio
setopt HIST_REDUCE_BLANKS        # Eliminar espacios extras
setopt HIST_VERIFY               # Verificar antes de ejecutar !!
setopt SHARE_HISTORY             # Compartir historial entre sesiones
setopt APPEND_HISTORY            # Agregar al historial
setopt INC_APPEND_HISTORY        # Escribir inmediatamente
setopt EXTENDED_HISTORY          # Incluir timestamps

# Navegaci√≥n de directorios
setopt AUTO_CD                   # cd autom√°tico
setopt AUTO_PUSHD                # push autom√°tico al directorio stack
setopt PUSHD_IGNORE_DUPS         # No duplicar en stack

# =====================================================
# ‚ö° COMPLETION B√ÅSICO
# =====================================================

autoload -Uz compinit
compinit

setopt COMPLETE_IN_WORD          # Completar en medio de palabras
setopt ALWAYS_TO_END             # Cursor al final despu√©s de completar
setopt AUTO_MENU                 # Mostrar menu de completions
setopt AUTO_LIST                 # Listar opciones autom√°ticamente

# Opciones adicionales √∫tiles
setopt CORRECT                   # Corregir comandos mal escritos
setopt EXTENDED_GLOB             # Globbing extendido
setopt NO_BEEP                   # Sin sonidos

# =====================================================
# üé® STARSHIP PROMPT
# =====================================================

# Inicializaci√≥n directa de Starship con fallback seguro
export STARSHIP_CONFIG="${STARSHIP_CONFIG:-$HOME/.config/starship.toml}"
# Evitar errores "parameter not set" cuando Starship consulta variables internas
export STARSHIP_CMD_STATUS="${STARSHIP_CMD_STATUS-0}"
export STARSHIP_DURATION="${STARSHIP_DURATION-0}"
if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
else
    PROMPT='%F{cyan}%n@%m%f:%F{blue}%~%f$ '
fi

# =====================================================
# üîß VARIABLES DE ENTORNO
# =====================================================

export EDITOR='nvim'
export VISUAL='nvim'
export BROWSER='firefox'
export TERMINAL='kitty'
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'
# Asegurar que LS_COLORS exista antes de usarlo en estilos de completion
export LS_COLORS="${LS_COLORS-}"

# =====================================================
# üìÇ ALIASES ESENCIALES
# =====================================================

# Navegaci√≥n
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias -- -='cd -'

# Operaciones de archivos
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -I'
alias mkdir='mkdir -pv'

# Listado de archivos
if command -v eza &>/dev/null; then
    alias ls='eza --icons --group-directories-first'
    alias ll='eza -l --icons --group-directories-first'
    alias la='eza -la --icons --group-directories-first'
    alias tree='eza --tree --icons'
else
    alias ll='ls -l --color=auto'
    alias la='ls -la --color=auto'
fi

# Herramientas modernas
if command -v bat &>/dev/null; then
    alias cat='bat --style=auto --paging=never'
fi

if command -v btop &>/dev/null; then
    alias htop='btop'
    alias top='btop'
elif command -v htop &>/dev/null; then
    alias top='htop'
fi

if command -v rg &>/dev/null; then
    alias grep='rg --smart-case --hidden'
fi

if command -v fd &>/dev/null; then
    alias find='fd --hidden --follow'
fi

# Git shortcuts
alias g='git'
alias gs='git status -sb'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gco='git checkout'
alias gb='git branch'
alias glog='git log --oneline --graph --decorate'

# Sistema
alias myip='curl -s ipinfo.io/ip'
alias ports='netstat -tulanp'
alias sysinfo='fastfetch 2>/dev/null || neofetch 2>/dev/null || uname -a'

# Arch Linux
alias pacupdate='sudo pacman -Syu'
alias pacinstall='sudo pacman -S'
alias pacsearch='pacman -Ss'
alias aurinstall='yay -S'
alias aurupdate='yay -Syu'

# =====================================================
# üîå PLUGINS
# =====================================================

# Autosuggestions
if [[ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=240'
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
fi

# Syntax highlighting
if [[ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Completions adicionales
if [[ -d /usr/share/zsh/plugins/zsh-completions ]]; then
    fpath=(/usr/share/zsh/plugins/zsh-completions/src $fpath)
fi

# FZF
if command -v fzf &>/dev/null; then
    source /usr/share/fzf/key-bindings.zsh 2>/dev/null
    source /usr/share/fzf/completion.zsh 2>/dev/null
    
    export FZF_DEFAULT_OPTS="--height 50% --layout=reverse --border"
    
    if command -v fd &>/dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
fi

# Zoxide
if command -v zoxide &>/dev/null; then
    eval "$(zoxide init zsh)"
    alias cd='z'
fi

# Atuin
if command -v atuin &>/dev/null; then
    eval "$(atuin init zsh)"
fi

# =====================================================
# üéØ KEY BINDINGS B√ÅSICOS
# =====================================================

bindkey -e  # Emacs-style

# History search
bindkey '^R' history-incremental-search-backward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward

# =====================================================
# üé® WELCOME MESSAGE
# =====================================================

if [[ -z "$FASTFETCH_SHOWN" && -z "${TMUX:-}${STY:-}" ]]; then
    if command -v fastfetch &>/dev/null; then
        fastfetch
        export FASTFETCH_SHOWN=1
    elif command -v neofetch &>/dev/null; then
        neofetch
        export FASTFETCH_SHOWN=1
    fi
fi

# =====================================================
# üîß FUNCIONES √öTILES
# =====================================================

# Crear directorio y entrar
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extraer archivos
extract() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"    ;;
            *.tar.gz)    tar xzf "$1"    ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *)           echo "'$1' no se puede extraer" ;;
        esac
    else
        echo "'$1' no es un archivo v√°lido"
    fi
}

# Backup con timestamp
backup() {
    local filename="$1"
    local backup_name="${filename}.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$filename" "$backup_name"
    echo "Backup creado: $backup_name"
}

# Recargar configuraci√≥n
reload() {
    source ~/.zshrc
    echo "Configuraci√≥n de Zsh recargada"
}

# Informaci√≥n del sistema
quickinfo() {
    echo -e "\033[1;34mSistema:\033[0m $(uname -sr)"
    echo -e "\033[1;34mHostname:\033[0m $(hostname)"
    echo -e "\033[1;34mUptime:\033[0m $(uptime -p 2>/dev/null || uptime)"
    echo -e "\033[1;34mUsuario:\033[0m $(whoami)"
    echo -e "\033[1;34mShell:\033[0m $SHELL"
}

# Actualizar Arch
function arch-update() {
    echo "üîÑ Actualizando sistema..."
    sudo pacman -Syu && {
        echo "‚úÖ Sistema actualizado"
        if command -v yay &>/dev/null; then
            yay -Syu --noconfirm
        fi
    }
}

# Buscar paquetes
arch-search() {
    [[ -z "$1" ]] && { echo "Uso: arch-search <paquete>"; return 1; }
    pacman -Ss "$1"
    command -v yay &>/dev/null && yay -Ss "$1"
}

# =====================================================
# üìã CUSTOMIZACIONES LOCALES
# =====================================================

[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# =====================================================
# üé® COMPLETION STYLING B√ÅSICO
# =====================================================

zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# =====================================================
# ‚ö° LAZY LOADING ESENCIAL
# =====================================================

# NVM lazy loading
if [[ -d "$HOME/.nvm" ]]; then
    export NVM_DIR="$HOME/.nvm"
    nvm() {
        unset -f nvm
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm "$@"
    }
fi
export PATH=$PATH:/home/dreamcoder08/.local/bin
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Fastfetch aliases
alias ff="fastfetch"
alias ff-dream="fastfetch --config ~/.config/fastfetch/config.jsonc"
alias ff-custom="fastfetch --config ~/.config/fastfetch/config.local.jsonc"

# Nano aliases
alias nano="nano --rcfile ~/.config/nano/nanorc"
alias nano-code="nano --rcfile ~/.config/nano/code.nanorc"
alias nano-config="nano --rcfile ~/.config/nano/config.nanorc"
alias nano-log="nano --rcfile ~/.config/nano/log.nanorc"
alias nano-edit="nano --rcfile ~/.config/nano/nanorc.local"

# =====================================================
# ‚ö° OPTIMIZACIONES AVANZADAS DE PERFORMANCE
# =====================================================

# Profiling opcional (descomenta para debugging)
# zmodload zsh/zprof

# Cache de completiones
[[ ! -d ~/.zsh/cache ]] && mkdir -p ~/.zsh/cache
zstyle ':completion:*' cache-path ~/.zsh/cache

# Completi√≥n m√°s inteligente
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on

# Completi√≥n para herramientas de pentesting
compdef _gnu_generic nmap 2>/dev/null
compdef _gnu_generic metasploit 2>/dev/null
compdef _gnu_generic burp 2>/dev/null

# =====================================================
# üéØ FUNCIONES AVANZADAS PARA RED TEAM
# =====================================================

# Funci√≥n para cambiar contexto de pentesting
pentest-context() {
    local target="$1"
    local proxy="$2"
    
    if [[ -n "$target" ]]; then
        export TARGET="$target"
        echo "üéØ Target configurado: $TARGET"
    fi
    
    if [[ -n "$proxy" ]]; then
        export PROXY="$proxy"
        echo "üîí Proxy configurado: $PROXY"
    fi
    
    # Actualizar prompt si Starship est√° disponible
    if command -v starship &>/dev/null; then
        starship_precmd
    fi
}

# Funci√≥n para limpiar contexto
clear-context() {
    unset TARGET PROXY VPN_STATUS CURRENT_TOOL
    echo "üßπ Contexto limpiado"
    if command -v starship &>/dev/null; then
        starship_precmd
    fi
}

# Funci√≥n para mostrar informaci√≥n del sistema
system_status() {
    local cpu_usage=$(top -bn1 2>/dev/null | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 || echo "N/A")
    local mem_usage=$(free 2>/dev/null | grep Mem | awk '{printf("%.1f", $3/$2 * 100.0)}' || echo "N/A")
    local disk_usage=$(df / 2>/dev/null | tail -1 | awk '{print $5}' | sed 's/%//' || echo "N/A")
    
    echo -e "üíª CPU: ${cpu_usage}% | üß† RAM: ${mem_usage}% | üíæ DISK: ${disk_usage}%"
}

# Funci√≥n para limpiar historial sensible
clean_history() {
    local sensitive_patterns=("password" "token" "key" "secret" "passwd" "api_key")
    for pattern in "${sensitive_patterns[@]}"; do
        sed -i "/$pattern/d" ~/.zsh_history 2>/dev/null
    done
    echo "üßπ Historial sensible limpiado"
}

# =====================================================
# ‚å®Ô∏è KEY BINDINGS AVANZADOS
# =====================================================

# Navegaci√≥n mejorada
bindkey '^[[1;5C' forward-word      # Ctrl+Right
bindkey '^[[1;5D' backward-word     # Ctrl+Left
bindkey '^H' backward-kill-word     # Ctrl+Backspace
bindkey '^[[3;5~' kill-word         # Ctrl+Delete

# B√∫squeda en historial con FZF (si est√° disponible)
if command -v fzf &>/dev/null; then
    bindkey '^R' fzf-history-widget
fi

# =====================================================
# üöÄ LAZY LOADING MEJORADO
# =====================================================

# Funci√≥n para lazy loading
lazy_load() {
    local cmd="$1"
    local init_cmd="$2"
    
    eval "$cmd() { unset -f $cmd; $init_cmd; $cmd \"\$@\"; }"
}

# Lazy loading para herramientas pesadas (ejemplos)
# lazy_load "docker" "source /usr/share/zsh/plugins/zsh-docker/docker.plugin.zsh"
# lazy_load "kubectl" "source /usr/share/zsh/plugins/zsh-kubectl/kubectl.plugin.zsh"

# =====================================================
# üé® PROMPT PERSONALIZADO AVANZADO
# =====================================================

# Prompt personalizado para cuando Starship no est√© disponible
custom_prompt() {
    local exit_code=$?
    local user_color="%F{cyan}"
    local host_color="%F{green}"
    local dir_color="%F{blue}"
    local git_color="%F{yellow}"
    
    # Usuario y host
    local prompt_user="$user_color%n@%m%f"
    
    # Directorio actual
    local prompt_dir="$dir_color%~%f"
    
    # Estado de Git
    local git_status=""
    if git rev-parse --is-inside-work-tree &>/dev/null; then
        local branch=$(git branch --show-current 2>/dev/null)
        local status=$(git status --porcelain 2>/dev/null | wc -l)
        if [[ $status -gt 0 ]]; then
            git_status="$git_color[$branch*]%f"
        else
            git_status="$git_color[$branch]%f"
        fi
    fi
    
    # Indicador de exit code
    local exit_indicator=""
    if [[ $exit_code -ne 0 ]]; then
        exit_indicator="%F{red}‚ùØ%f"
    else
        exit_indicator="%F{green}‚ùØ%f"
    fi
    
    # Variables de contexto Red Team
    local context_info=""
    [[ -n "$TARGET" ]] && context_info="$context_info %F{red}üéØ$TARGET%f"
    [[ -n "$PROXY" ]] && context_info="$context_info %F{cyan}üîí$PROXY%f"
    
    PROMPT="$prompt_user:$prompt_dir$git_status$context_info $exit_indicator "
}

# Usar prompt personalizado si Starship no est√° disponible
if ! command -v starship &>/dev/null; then
    setopt PROMPT_SUBST
    precmd_functions+=(custom_prompt)
fi

# =====================================================
# üîí SEGURIDAD Y PRIVACIDAD
# =====================================================

# Variables sensibles (no se guardan en historial)
export API_KEY="" 2>/dev/null
export SECRET_TOKEN="" 2>/dev/null
export DATABASE_PASSWORD="" 2>/dev/null

# =====================================================
# üìä ALIASES AVANZADOS
# =====================================================

# Informaci√≥n del sistema
alias status="system_status"
alias context="echo -e \"üéØ Target: ${TARGET:-'No configurado'}\nüîí Proxy: ${PROXY:-'No configurado'}\""
alias clean="clear-context"

# Herramientas de pentesting (si est√°n disponibles)
command -v nmap &>/dev/null && alias nmap-priv="sudo nmap"
command -v msfconsole &>/dev/null && alias msf="msfconsole"
command -v burpsuite &>/dev/null && alias burp="burpsuite"

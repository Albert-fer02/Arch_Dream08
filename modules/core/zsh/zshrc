#!/bin/zsh
# =====================================================
# üöÄ ZSH Configuration - Arch Dream v4.2 CLEAN
# =====================================================
# Focused and essential Zsh configuration
# =====================================================

# =====================================================
# üìö HISTORIAL OPTIMIZADO
# =====================================================

HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000

# Opciones de historial esenciales
setopt HIST_IGNORE_DUPS          # No duplicar comandos consecutivos
setopt HIST_IGNORE_ALL_DUPS      # Eliminar duplicados en todo el historial
setopt HIST_SAVE_NO_DUPS         # No guardar duplicados
setopt HIST_FIND_NO_DUPS         # No mostrar duplicados en b√∫squeda
setopt HIST_IGNORE_SPACE         # Ignorar comandos que empiecen con espacio
setopt HIST_REDUCE_BLANKS        # Eliminar espacios extras
setopt HIST_VERIFY               # Verificar antes de ejecutar !!
setopt SHARE_HISTORY             # Compartir historial entre sesiones
setopt APPEND_HISTORY            # Agregar al historial
setopt INC_APPEND_HISTORY        # Escribir inmediatamente
setopt EXTENDED_HISTORY          # Incluir timestamps

# Navegaci√≥n de directorios
setopt AUTO_CD                   # cd autom√°tico
setopt AUTO_PUSHD                # push autom√°tico al directorio stack
setopt PUSHD_IGNORE_DUPS         # No duplicar en stack

# =====================================================
# ‚ö° COMPLETION B√ÅSICO
# =====================================================

autoload -Uz compinit
compinit

setopt COMPLETE_IN_WORD          # Completar en medio de palabras
setopt ALWAYS_TO_END             # Cursor al final despu√©s de completar
setopt AUTO_MENU                 # Mostrar menu de completions
setopt AUTO_LIST                 # Listar opciones autom√°ticamente

# Opciones adicionales √∫tiles
setopt CORRECT                   # Corregir comandos mal escritos
setopt EXTENDED_GLOB             # Globbing extendido
setopt NO_BEEP                   # Sin sonidos

# =====================================================
# üé® STARSHIP PROMPT
# =====================================================

if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
else
    PROMPT='%F{cyan}%n@%m%f:%F{blue}%~%f$ '
fi

# =====================================================
# üîß VARIABLES DE ENTORNO
# =====================================================

export EDITOR='nvim'
export VISUAL='nvim'
export BROWSER='firefox'
export TERMINAL='kitty'
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'

# =====================================================
# üìÇ ALIASES ESENCIALES
# =====================================================

# Navegaci√≥n
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias -- -='cd -'

# Operaciones de archivos
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -I'
alias mkdir='mkdir -pv'

# Listado de archivos
if command -v eza &>/dev/null; then
    alias ls='eza --icons --group-directories-first'
    alias ll='eza -l --icons --group-directories-first'
    alias la='eza -la --icons --group-directories-first'
    alias tree='eza --tree --icons'
else
    alias ll='ls -l --color=auto'
    alias la='ls -la --color=auto'
fi

# Herramientas modernas
if command -v bat &>/dev/null; then
    alias cat='bat --style=auto --paging=never'
fi

if command -v btop &>/dev/null; then
    alias htop='btop'
    alias top='btop'
elif command -v htop &>/dev/null; then
    alias top='htop'
fi

if command -v rg &>/dev/null; then
    alias grep='rg --smart-case --hidden'
fi

if command -v fd &>/dev/null; then
    alias find='fd --hidden --follow'
fi

# Git shortcuts
alias g='git'
alias gs='git status -sb'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gco='git checkout'
alias gb='git branch'
alias glog='git log --oneline --graph --decorate'

# Sistema
alias myip='curl -s ipinfo.io/ip'
alias ports='netstat -tulanp'
alias sysinfo='fastfetch 2>/dev/null || neofetch 2>/dev/null || uname -a'

# Arch Linux
alias pacupdate='sudo pacman -Syu'
alias pacinstall='sudo pacman -S'
alias pacsearch='pacman -Ss'
alias aurinstall='yay -S'
alias aurupdate='yay -Syu'

# =====================================================
# üîå PLUGINS
# =====================================================

# Autosuggestions
if [[ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=240'
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
fi

# Syntax highlighting
if [[ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Completions adicionales
if [[ -d /usr/share/zsh/plugins/zsh-completions ]]; then
    fpath=(/usr/share/zsh/plugins/zsh-completions/src $fpath)
fi

# FZF
if command -v fzf &>/dev/null; then
    source /usr/share/fzf/key-bindings.zsh 2>/dev/null
    source /usr/share/fzf/completion.zsh 2>/dev/null
    
    export FZF_DEFAULT_OPTS="--height 50% --layout=reverse --border"
    
    if command -v fd &>/dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
fi

# Zoxide
if command -v zoxide &>/dev/null; then
    eval "$(zoxide init zsh)"
    alias cd='z'
fi

# Atuin
if command -v atuin &>/dev/null; then
    eval "$(atuin init zsh)"
fi

# =====================================================
# üéØ KEY BINDINGS B√ÅSICOS
# =====================================================

bindkey -e  # Emacs-style

# History search
bindkey '^R' history-incremental-search-backward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward

# =====================================================
# üé® WELCOME MESSAGE
# =====================================================

if [[ -z "$FASTFETCH_SHOWN" && -z "${TMUX:-}${STY:-}" ]]; then
    if command -v fastfetch &>/dev/null; then
        fastfetch
        export FASTFETCH_SHOWN=1
    elif command -v neofetch &>/dev/null; then
        neofetch
        export FASTFETCH_SHOWN=1
    fi
fi

# =====================================================
# üîß FUNCIONES √öTILES
# =====================================================

# Crear directorio y entrar
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extraer archivos
extract() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"    ;;
            *.tar.gz)    tar xzf "$1"    ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *)           echo "'$1' no se puede extraer" ;;
        esac
    else
        echo "'$1' no es un archivo v√°lido"
    fi
}

# Backup con timestamp
backup() {
    local filename="$1"
    local backup_name="${filename}.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$filename" "$backup_name"
    echo "Backup creado: $backup_name"
}

# Recargar configuraci√≥n
reload() {
    source ~/.zshrc
    echo "Configuraci√≥n de Zsh recargada"
}

# Informaci√≥n del sistema
quickinfo() {
    echo -e "\033[1;34mSistema:\033[0m $(uname -sr)"
    echo -e "\033[1;34mHostname:\033[0m $(hostname)"
    echo -e "\033[1;34mUptime:\033[0m $(uptime -p 2>/dev/null || uptime)"
    echo -e "\033[1;34mUsuario:\033[0m $(whoami)"
    echo -e "\033[1;34mShell:\033[0m $SHELL"
}

# Actualizar Arch
arch-update() {
    echo "üîÑ Actualizando sistema..."
    sudo pacman -Syu && {
        echo "‚úÖ Sistema actualizado"
        if command -v yay &>/dev/null; then
            yay -Syu --noconfirm
        fi
    }
}

# Buscar paquetes
arch-search() {
    [[ -z "$1" ]] && { echo "Uso: arch-search <paquete>"; return 1; }
    pacman -Ss "$1"
    command -v yay &>/dev/null && yay -Ss "$1"
}

# =====================================================
# üìã CUSTOMIZACIONES LOCALES
# =====================================================

[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# =====================================================
# üé® COMPLETION STYLING B√ÅSICO
# =====================================================

zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# =====================================================
# ‚ö° LAZY LOADING ESENCIAL
# =====================================================

# NVM lazy loading
if [[ -d "$HOME/.nvm" ]]; then
    export NVM_DIR="$HOME/.nvm"
    nvm() {
        unset -f nvm
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm "$@"
    }
fi
export PATH=$PATH:/home/dreamcoder08/.local/bin
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Fastfetch aliases
alias ff="fastfetch"
alias ff-dream="fastfetch --config ~/.config/fastfetch/config.jsonc"
alias ff-custom="fastfetch --config ~/.config/fastfetch/config.local.jsonc"

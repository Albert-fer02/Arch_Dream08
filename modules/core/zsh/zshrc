#            _
#    _______| |__  _ __ ___
#   |_ / __| '_ \| '__/ __|
#  _ / /\__ \ | | | | | (__
# (_)___|___/_| |_|_|  \___|
#
# =====================================================
# 🚀 ZSH Configuration - Red Team Optimized with Starship + Zinit
# =====================================================
# Configuración ultra-optimizada para Red Team y hacking ético
# Features: Starship prompt, Zinit plugin manager, productividad máxima
# =====================================================

# =====================================================
# ⚡ ULTRA PERFORMANCE OPTIMIZATIONS
# =====================================================

# Compilation flags for performance
export ARCHFLAGS="-arch x86_64"

# Disable global RCS files for better security
unsetopt GLOBAL_RCS

# Enable completion caching with optimized settings
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Optimize history for performance and security
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_ALL_DUPS HIST_IGNORE_SPACE 
setopt HIST_FIND_NO_DUPS HIST_SAVE_NO_DUPS INC_APPEND_HISTORY 
setopt SHARE_HISTORY HIST_VERIFY HIST_REDUCE_BLANKS

# Shell Options - Optimized for Red Team productivity
setopt CORRECT CORRECT_ALL NOCLOBBER AUTO_CD AUTO_PUSHD 
setopt PUSHD_IGNORE_DUPS PUSHD_SILENT GLOB_DOTS EXTENDED_GLOB 
setopt NUMERIC_GLOB_SORT NULL_GLOB AUTO_MENU AUTO_PARAM_SLASH

# =====================================================
# 🎯 RED TEAM ENVIRONMENT VARIABLES
# =====================================================

# Editor Configuration
export EDITOR='nvim' VISUAL='nvim' BROWSER='firefox' TERMINAL='kitty'

# Locale Configuration
export LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 LC_COLLATE=C

# PATH Configuration - Security tools priority
typeset -U path
path=(
    ~/.local/bin 
    ~/.cargo/bin 
    /opt/homebrew/bin
    /usr/local/bin
    /usr/local/go/bin
    ~/go/bin
    ~/.npm-global/bin
    ~/.bun/bin
    /usr/bin
    /bin
    /usr/sbin
    /sbin
)

# Development environment
export GOPATH="$HOME/go"
export NODE_ENV=development

# XDG Base Directory Specification
export XDG_CONFIG_HOME="$HOME/.config" 
export XDG_DATA_HOME="$HOME/.local/share" 
export XDG_CACHE_HOME="$HOME/.cache" 
export XDG_STATE_HOME="$HOME/.local/state"

# Security tools paths
export PATH="$PATH:/opt/metasploit-framework/bin"
export PATH="$PATH:/opt/burpsuite"
export PATH="$PATH:/opt/nmap/bin"

# =====================================================
# 🔧 ZINIT PLUGIN MANAGER SETUP
# =====================================================

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# =====================================================
# 🔌 ZINIT PLUGINS - Red Team Productivity Suite
# =====================================================

# Add in zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting

# Navigation and productivity
zinit light rupa/z
zinit light zdharma-continuum/history-search-multi-word

# Auto-completion enhancements
zinit light marlonrichert/zsh-autocomplete

# Additional Red Team tools - using only zsh-z for directory jumping
zinit light agkozak/zsh-z

# Load completions
autoload -Uz compinit && compinit

# =====================================================
# 🌟 STARSHIP PROMPT INITIALIZATION
# =====================================================

# Initialize Starship prompt
if command -v starship &>/dev/null; then
    eval "$(starship init zsh)"
else
    echo "⚠️  Starship not found. Installing..."
fi

# =====================================================
# 🎨 FZF CONFIGURATION - Red Team Enhanced
# =====================================================

export FZF_DEFAULT_OPTS="
--color=bg+:#363a4f,bg:#24273a,spinner:#f4dbd6,hl:#ed8796
--color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6
--color=marker:#f4dbd6,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796
--height=60% --layout=reverse --border --margin=1 --padding=1
--preview-window=right:60%:wrap
--bind='ctrl-u:preview-page-up,ctrl-d:preview-page-down'
--bind='ctrl-/:toggle-preview'
--bind='ctrl-y:execute-silent(echo {} | xclip -selection clipboard)'
"

export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --exclude node_modules'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git --exclude node_modules'

# =====================================================
# 🛠️ MODERN COMMAND REPLACEMENTS
# =====================================================

# File Operations with modern tools
command -v bat &> /dev/null && { 
    alias cat='bat --style=plain --paging=never' 
    alias ccat='bat --style=full' 
    export BAT_THEME="Catppuccin Frappe" 
}

command -v eza &> /dev/null && { 
    alias ls='eza --icons --group-directories-first --git' 
    alias ll='eza -l --icons --group-directories-first --git --time-style=long-iso --smart-group' 
    alias la='eza -la --icons --group-directories-first --git --time-style=long-iso' 
    alias tree='eza --tree --level=3 --icons --git-ignore' 
    alias ltree='eza --tree --level=4 --icons --long --git-ignore' 
    alias lt='eza --tree --level=2 --icons --git-ignore'
    alias lta='eza --tree --level=2 --icons --git-ignore --all'
} || { 
    alias ll='ls -alF --color=auto --group-directories-first' 
    alias la='ls -A --color=auto --group-directories-first' 
}

command -v rg &> /dev/null && { 
    alias grep='rg --smart-case --hidden --glob "!**/.git/*" --glob "!**/node_modules/*"' 
    alias rga='rg --no-ignore --hidden' 
    alias rgi='rg --case-insensitive'
    alias rgf='rg --files --glob'
}

command -v fd &> /dev/null && { 
    alias find='fd' 
    alias fda='fd --no-ignore --hidden' 
    alias fdi='fd --case-insensitive'
    alias fde='fd --extension'
}

# System Monitoring
command -v duf &> /dev/null && alias df='duf'
command -v dust &> /dev/null && alias du='dust'
command -v btop &> /dev/null && alias top='btop' || alias top='htop'
command -v delta &> /dev/null && alias diff='delta'
command -v xh &> /dev/null && alias http='xh'
command -v procs &> /dev/null && alias pps='procs'

# =====================================================
# 🚀 RED TEAM ALIASES & FUNCTIONS
# =====================================================

# Navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'
alias -- -='cd -'

# Directory shortcuts
alias dl='cd ~/Downloads' dt='cd ~/Desktop' dc='cd ~/Documents' 
alias dev='cd ~/Development' proj='cd ~/Projects' tmp='cd /tmp'
alias tools='cd /opt' www='cd /var/www' logs='cd /var/log'

# File operations with safety
alias rm='rm -i' cp='cp -i' mv='mv -i' mkdir='mkdir -p'

# =====================================================
# 🔐 SECURITY & PENETRATION TESTING ALIASES
# =====================================================

# Network reconnaissance
alias nmap-quick='nmap -T4 -F'
alias nmap-intense='nmap -T4 -A -v'
alias nmap-ping='nmap -sn'
alias nmap-fast='nmap -F --top-ports 1000'
alias nmap-udp='sudo nmap -sU --top-ports 1000'

# Web application testing
alias dirb-common='dirb $1 /usr/share/dirb/wordlists/common.txt'
alias gobuster-dir='gobuster dir -u $1 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt'
alias nikto-scan='nikto -h'

# Network analysis
alias myip='curl -s ifconfig.me && echo'
alias localip="ip route get 8.8.8.8 | awk '{print \$7}'"
alias ports='sudo lsof -i -P -n | grep LISTEN' 
alias netstat='ss -tuln'
alias listening='ss -tlnp'
alias connections='ss -tup'

# System information gathering
alias sysinfo='inxi -Fxz' 
alias meminfo='free -h' 
alias diskinfo='lsblk' 
alias cpuinfo='lscpu' 
alias gpuinfo='lspci | grep -E "VGA|3D"'
alias kernelinfo='uname -a'
alias distroinfo='cat /etc/os-release'

# =====================================================
# 🐙 GIT ALIASES - Enhanced for Red Team workflow
# =====================================================

alias g='git' 
alias gs='git status --short --branch' 
alias ga='git add' 
alias gaa='git add --all' 
alias gc='git commit --verbose' 
alias gcm='git commit -m' 
alias gca='git commit -am' 
alias gp='git push' 
alias gpl='git pull' 
alias gl='git log --oneline --graph --decorate --all -10' 
alias gd='git diff'
alias gdc='git diff --cached'
alias gco='git checkout'
alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gm='git merge'
alias gr='git rebase'
alias gst='git stash'
alias gstp='git stash pop'
alias gf='git fetch'
alias gcl='git clone'

# Advanced Git Functions
gac() { git add --all && git commit -m "$1" }
gacp() { git add --all && git commit -m "$1" && git push }
gundo() { git reset --soft HEAD~1 }
gamend() { git commit --amend --no-edit }
gcleanhard() { git clean -fd && git reset --hard HEAD }

# =====================================================
# 📦 PACKAGE MANAGEMENT - Arch Linux
# =====================================================

# Pacman aliases
alias pac='sudo pacman' 
alias pacr='sudo pacman -R' 
alias pacu='sudo pacman -Syu' 
alias pacq='pacman -Q' 
alias pacqi='pacman -Qi' 
alias pacql='pacman -Ql' 
alias pacqo='pacman -Qo' 
alias pacc='sudo pacman -Sc' 
alias paccc='sudo pacman -Scc'
alias pacs='pacman -Ss' 
alias paci='sudo pacman -S'

# AUR helper
if command -v yay &> /dev/null; then
    alias aur='yay' 
    alias aurs='yay -Ss' 
    alias auri='yay -S' 
    alias auru='yay -Syu'
elif command -v paru &> /dev/null; then
    alias aur='paru' 
    alias aurs='paru -Ss' 
    alias auri='paru -S' 
    alias auru='paru -Syu'
fi

# System maintenance
alias cleanup='sudo pacman -Sc && sudo journalctl --vacuum-time=7d && sudo pacman -Rns $(pacman -Qtdq) 2>/dev/null || true'
alias orphans='pacman -Qtdq' 
alias fixkeys='sudo pacman-key --init && sudo pacman-key --populate archlinux'

# =====================================================
# 💻 DEVELOPMENT TOOLS
# =====================================================

# Python
alias py='python3' 
alias py3='python3' 
alias pip='pip3' 
alias venv='python3 -m venv' 
alias activate='source ./venv/bin/activate'

# Node.js
alias n='npm' 
alias ni='npm install' 
alias nid='npm install --save-dev' 
alias nrb='npm run build' 
alias nrd='npm run dev'
alias y='yarn' 
alias yi='yarn install' 
alias yrb='yarn build' 
alias yrd='yarn dev'

# Process management
alias psg='ps aux | grep -v grep | grep -i' 
alias killall='killall -i' 
alias j='jobs' 
alias h='history'

# File opening
alias open='xdg-open' 
alias edit='$EDITOR'

# =====================================================
# 🎯 RED TEAM SPECIFIC FUNCTIONS
# =====================================================

# Get network information for Red Team operations
redteam-info() {
    echo "🎯 Red Team Network Information"
    echo "================================"
    echo "🏠 Local IP: $(ip route get 8.8.8.8 | awk '{print $7}')"
    echo "🌐 Public IP: $(curl -s ifconfig.me)"
    echo "🔗 Gateway: $(ip route | grep default | awk '{print $3}')"
    echo "📡 Interface: $(ip route get 8.8.8.8 | awk '{print $5}')"
    echo "🖥️  Hostname: $(hostname)"
    echo "👤 User: $(whoami)"
    echo "⏰ Time: $(date)"
}

# Set target for Red Team operations
set-target() {
    if [[ -n "$1" ]]; then
        export TARGET="$1"
        export LOCAL_IP=$(ip route get 8.8.8.8 | awk '{print $7}')
        export PUBLIC_IP=$(curl -s ifconfig.me)
        echo "🎯 Target set to: $TARGET"
        echo "🏠 Local IP: $LOCAL_IP"
        echo "🌐 Public IP: $PUBLIC_IP"
    else
        echo "Usage: set-target <target_ip_or_domain>"
    fi
}

# Quick port scan
portscan() {
    if [[ -n "$1" ]]; then
        echo "🔍 Scanning ports on $1..."
        nmap -T4 -F "$1"
    else
        echo "Usage: portscan <target>"
    fi
}

# Quick directory enumeration
direnum() {
    if [[ -n "$1" ]]; then
        echo "📁 Enumerating directories on $1..."
        gobuster dir -u "$1" -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50
    else
        echo "Usage: direnum <url>"
    fi
}

# Base64 encode/decode
b64e() { echo -n "$1" | base64 }
b64d() { echo -n "$1" | base64 -d }

# URL encode/decode
urle() { python3 -c "import urllib.parse; print(urllib.parse.quote('$1'))" }
urld() { python3 -c "import urllib.parse; print(urllib.parse.unquote('$1'))" }

# Hash functions
md5sum() { echo -n "$1" | md5sum | cut -d' ' -f1 }
sha1sum() { echo -n "$1" | sha1sum | cut -d' ' -f1 }
sha256sum() { echo -n "$1" | sha256sum | cut -d' ' -f1 }

# =====================================================
# 🛠️ UTILITY FUNCTIONS
# =====================================================

# Extract function for various archive types
extract() {
    [[ -f "$1" ]] || { echo "'$1' is not a valid file"; return 1 }
    case "$1" in
        *.tar.bz2) tar xjf "$1" ;;
        *.tar.gz)  tar xzf "$1" ;;
        *.bz2)     bunzip2 "$1" ;;
        *.rar)     unrar x "$1" ;;
        *.gz)      gunzip "$1"  ;;
        *.tar)     tar xf "$1"  ;;
        *.tbz2)    tar xjf "$1" ;;
        *.tgz)     tar xzf "$1" ;;
        *.zip)     unzip "$1"   ;;
        *.Z)       uncompress "$1" ;;
        *.7z)      7z x "$1"    ;;
        *.xz)      unxz "$1"    ;;
        *.exe)     cabextract "$1" ;;
        *.deb)     ar x "$1" && tar xf data.tar.* ;;
        *.rpm)     rpm2cpio "$1" | cpio -idmv ;;
        *)         echo "'$1': unrecognized file compression" ;;
    esac
}

# Create directory and cd into it
mkcd() { mkdir -p "$1" && cd "$1" }

# Quick backup of a file
backup() { cp "$1" "$1.backup.$(date +%Y%m%d_%H%M%S)" }

# Quick password generator
passgen() { openssl rand -base64 "${1:-12}" | tr -d "=+/" | cut -c1-${1:-12} }

# Quick calculator
calc() { echo "$*" | bc -l }

# Quick system update
sysupdate() {
    echo "🔄 Updating system..."
    sudo pacman -Syu
    if command -v yay &> /dev/null; then
        echo "🔄 Updating AUR packages..."
        yay -Sua
    elif command -v paru &> /dev/null; then
        echo "🔄 Updating AUR packages..."
        paru -Sua
    fi
    echo "✅ System updated!"
}

# =====================================================
# 🎨 COMPLETION ENHANCEMENTS
# =====================================================

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Better completion for kill command
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# SSH completion
zstyle ':completion:*:ssh:*' hosts off
zstyle ':completion:*:scp:*' hosts off

# =====================================================
# 🔌 PLUGIN CONFIGURATIONS
# =====================================================

# Autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666,bold"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

# Syntax highlighting
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_STYLES[command]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[alias]='fg=cyan,bold'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=yellow,bold'
ZSH_HIGHLIGHT_STYLES[function]='fg=blue,bold'

# =====================================================
# 🏁 INITIALIZATION
# =====================================================

# Load completions
autoload -Uz compinit
compinit -d ~/.zsh/compdump

# Load Node Version Manager (if exists)
export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && \. "$NVM_DIR/bash_completion"

# Bun completions
[[ -s "$HOME/.bun/_bun" ]] && source "$HOME/.bun/_bun"

# Rust environment
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

# FZF key bindings - Use system package first, then fallback
if [[ -f /usr/share/fzf/key-bindings.zsh ]] && [[ -f /usr/share/fzf/completion.zsh ]]; then
    source /usr/share/fzf/key-bindings.zsh
    source /usr/share/fzf/completion.zsh
elif command -v fzf &>/dev/null; then
    # FZF is available but system files not found, use basic setup
    export FZF_COMPLETION_TRIGGER='**'
    # Basic key bindings will be provided by the fzf-zsh-plugin from Zinit
fi

# Initialize fastfetch (system info display)
if [[ $- == *i* ]]; then
  if [[ -z "$FASTFETCH_SHOWN" && -z "${ZELLIJ:-}${TMUX:-}" && -z "${VSCODE_INJECTION:-}${TERM_PROGRAM:-}" ]]; then
    if command -v fastfetch &> /dev/null; then
      fastfetch
    fi
    export FASTFETCH_SHOWN=1
  fi
fi

# Load any additional custom configurations
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# =====================================================
# 🏁 FINAL CONFIGURATION
# =====================================================

# Editor aliases
alias vim="nvim"

# Silent bash execution functions
bash-silent() {
    unset LANG LC_ALL LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION 2>/dev/null
    export LANG=C.utf8
    export LC_ALL=C.utf8
    exec bash 2>/dev/null
}

# Quick alias
alias bbash='bash-silent'
alias vi="nvim"
alias nano="nvim"

# Quick access aliases
alias zshrc="nvim ~/.zshrc"
alias reload="source ~/.zshrc"
alias zshrc-edit="nvim ~/.zshrc && source ~/.zshrc"
alias starship-config="nvim ~/.config/starship.toml"

# System aliases
alias arch="cat /etc/arch-release"
alias kernel="uname -r"
alias uptime="uptime -p"
alias memory="free -h"
alias disk="df -h"
alias processes="ps aux --sort=-%cpu | head -20"

# Red Team functions loaded silently
# Use 'redteam-info' to show network information
# Use 'set-target <ip>' to set your target

# Export environment variables for Starship
export LOCAL_IP=$(ip route get 8.8.8.8 2>/dev/null | awk '{print $7}' || echo "unknown")
export PUBLIC_IP=""  # Will be set when needed to avoid slow startup
# Fastfetch aliases
alias ff="fastfetch-random"
alias ff-dream="fastfetch-random --config ~/.config/fastfetch/themes/dreamcoder.jsonc"
alias ff-custom="fastfetch-random --config ~/.config/fastfetch/config.local.jsonc"
alias fastfetch="fastfetch-random"
